{
    "getting-started.md": "# Getting Started\n\nRa is a simple interpreted programming language, built in Go. It features its own lexer, parser, and evaluator, and is designed for learning and experimenting with language development (not for production use).\n\n```ra\nlet hello = fn(name) {\n    puts(\"Hello, \" + name + \"!\");\n}\n\nhello(\"World\");\n```\n\n## Prerequisites\n- Go 1.20+ installed\n\n## Installation\nClone the repository:\n```bash\ngit clone https://github.com/MikhailWahib/Ra.git\ncd Ra\n```\n\n## Usage\nStart the REPL:\n```bash\ngo run ra.go\n```\n\nRun an example file:\n```bash\ngo run ra.go examples/<example-name>.ra\n```\n\n## Build\nBuild the Ra interpreter:\n```bash\ngo build -o bin/ra\n```\n\n## Testing\nTo run all tests:\n```bash\ngo test ./...\n```\n\nTo run a single test:\n```bash\ngo test ./<package-dir-name>\n```",
    "basic-syntax.md": "# Basic Syntax\n\nRa is designed to be simple and intuitive. Here are some basic syntax examples to get you started.\n\n## Variables and Data Types\nRa supports variables and basic data types like integers, strings, and booleans.\n\n```ra\nlet x = 10;  # Integer\nlet name = \"Alice\";  # String\nlet isActive = true;  # Boolean\n```\n\n## Arithmetic Operations\nRa supports standard arithmetic operations:\n```ra\nlet x = 10;\nlet y = 5;\nlet sum = x + y;  # Addition\nlet product = x * y;  # Multiplication\n```\n\n## Comments\nUse `#` for single-line comments:\n```ra\n# This is a comment\nlet x = 10;  # This is also a comment\n```",
    "control-flow.md": "# Control Flow\n\nRa provides basic control flow constructs like conditionals and loops.\n\n## Conditionals\nUse `if-else` for conditional logic:\n```ra\nlet a = 20;\nlet b = 10;\n\nif (a > b) {\n    puts(\"a is greater than b\");\n} else {\n    puts(\"a is less than or equal to b\");\n}\n```\n\n## Loops\nUse `while` for looping:\n```ra\nlet count = 0;\n\nwhile (count < 5) {\n    count = count + 1;\n    puts(count);\n}\n```",
    "data-structures.md": "# Data Structures\n\nRa supports basic data structures like arrays and dictionaries.\n\n## Arrays\nArrays are ordered collections of elements:\n```ra\nlet arr = [1, 2, 3, 4];\nputs(arr[0]);  # Access the first element\n\npush(arr, 5);  # Add an element\nputs(arr);  # Print the array\nputs(len(arr));  # Print the length of the array\n```\n\n## Dictionaries\nDictionaries store key-value pairs:\n```ra\nlet person = {\"name\": \"Alice\", \"age\": 30};\nputs(person[\"name\"]);  # Access value by key\n```",
    "functions.md": "# Functions\n\nFunctions are a core feature of Ra. You can define your own functions and use built-in functions.\n\n## Defining Functions\nUse the `fn` keyword to define functions:\n```ra\nlet add = fn(x, y) {\n    return x + y;\n};\n\nputs(add(3, 7));  # Call the function\n```\n\n## Built-in Functions\nRa provides built-in functions like `puts`, `max`, and `len`:\n```ra\nputs(\"Hello, Ra ð“‹¹!\");  # Print to console\n\nlet maxInt = max(10, 20, 5);  # Find the maximum value\nputs(maxInt);\n```\n\n## Recursion\nRa supports recursive functions:\n```ra\nlet factorial = fn(n) {\n    if (n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n};\n\nputs(factorial(5));  # Calculate factorial of 5\n```",
    "examples.md": "# Examples\n\nHere are some examples to help you get started with Ra.\n\n## Arithmetic Operations\n```ra\nlet x = 10;\nlet y = 5;\nlet sum = x + y;\nlet product = x * y;\n\nputs(sum);  # Prints 15\nputs(product);  # Prints 50\n```\n\n## Compound Assignment\n```ra\nx += 5;  # Equivalent to x = x + 5\ny *= 2;  # Equivalent to y = y * 2\n\nputs(x);  # Prints 15\nputs(y);  # Prints 10\n```"
}